pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
// CB
// (c) John Doty 2022

-- Items
-- [ ] Inertial Dampener (jump higher)
-- [ ] Inertial Amplifier (push blocks)
-- [ ] Hard-light projector (double-jump)
-- [ ] Radio (talk over long distances)
-- [ ] Crypto Module (unlock doors)
-- [ ] Batman Grapple (vertical and horizontal movement)

-- NOTE: Taking some stuff from eevee's aborted blog series


vec2={}
vec2.__index=vec2
function vec2:__lt(o)
  return self.x<o.x and self.y<o.y
end
function vec2:__eq(o)
  return self.x==o.x and self.y==o.y
end
function vec2:__add(o)
  return vec(self.x+o.x,self.y+o.y)
end
function vec2:__sub(o)
  return vec(self.x-o.x,self.y-o.y)
end
function vec2:__div(o)
  return vec(self.x/o, self.y/o)
end
function vec2:__mul(o)
  return vec(self.x*o, self.y*o)
end
function vec2:__tostring()
  return "("..self.x..","..self.y..")"
end
function vec2:length()
  return sqrt(self.x^2+self.y^2)
end
function vec(x,y)
  return setmetatable({x=x,y=y},vec2)
end

-- a clock for animations and the like
local clock=0

function room(x,y,w,h,name)
  return {
    top_left=vec(x,y)*8,
    bottom_right=vec(x+w,y+h)*8,
    name=name
  }
end
local rooms={
  room(0,0,32,16,"test")
}
local current_room

function find_room(position)
  for room in all(rooms) do
    if position >= room.top_left and position < room.bottom_right then
      return room
    end
  end
end

-- todo: collapse to save tokens obviously
local player_poses={
  walking={1,2,4,3,2,5},
  standing={2}, -- fake!
  jumping={2},
}
local player_velocity=vec(0,0)
local player_position=vec(64,0)
local player_frame=1
local jump_grace=0
local player_state="walking" -- walking,jumping,batman
local player_batman_end -- where is the rope attached
local player_batman_len -- how long is the rope?

-- physics constants, ala 2dengine.com
-- todo: obviously collapse for tokens
local c_jump_height=32    -- in pixels
local c_min_jump_height=2 -- in pixels
local c_time_to_apex=16   -- in frames, not seconds!
local c_damping_walk=0.5
local c_gravity=2 * c_jump_height / (c_time_to_apex * c_time_to_apex)
local c_jump_velocity=sqrt(2*c_jump_height*c_gravity)
local c_jump_term_velocity = -sqrt(c_jump_velocity^2 - 2 * c_gravity * (c_jump_height - c_min_jump_height))
--                           ^ mumbo jumbo

local camera_position=vec(0,0)


-- returns the new center y position if we bonk vertically
function vertical_collide(old_position,new_position,velocity)
  local x,dx=old_position.x,velocity.x/velocity.y

  local sign=sgn(velocity.y)
  local delta=sign*8 -- hh

  for ty=(old_position.y+delta)\8,(new_position.y+delta)\8,sign do
    for tx=(x-3)\8,(x+3)\8 do
      local tile=mget(tx,ty)
      if fget(tile,0) then
        -- this returns +0 if sign is positive (the top edge)
        -- this returns +8 if sign is negative (the bottom edge)
        -- -delta converts it to be the new center position
        return ty*8 + 4 - 4*sign - delta
      end
    end
    -- the outer loop moves along the y axis, this moves us the
    -- corresponding amount in the x axis
    x += dx
  end
end

function horizontal_collide(old_position,new_position,velocity)
  local y,dy=old_position.y,velocity.y/velocity.x

  local sign=sgn(velocity.x)
  local delta=sign*4 -- hw

  for tx=(old_position.x+delta)\8,(new_position.x+delta)\8,sign do
    for ty=(y-7)\8,(y+7)\8 do
      local tile=mget(tx,ty)
      if fget(tile,0) then
        -- see vertical_collide
        return tx*8 + 4 - 4*sign - delta
      end
    end
    y += dy
  end
end

-- ===========================
-- button stuff
-- ===========================
local buttons={}

function update_btn(button)
  button.was = button.is
  button.is = btn(button.key)
end

-- a more-useful version of btnp() which ignores repeats
function btnpp(key)
  local bs = buttons[key]
  return bs.is and not bs.was
end

-- button released (just now)
function btnr(key)
  local bs = buttons[key]
  return bs.was and not bs.is
end

function _init()
  -- init buttons
  for k in all{‚¨ÖÔ∏è,‚û°Ô∏è,‚¨ÜÔ∏è,‚¨áÔ∏è,‚ùé,üÖæÔ∏è} do
    buttons[k] = {key=k}
  end

  -- init room
  current_room=find_room(player_position)
end

-- ===========================
-- update
-- ===========================
function _update60()
  -- ===========================
  -- A global clock to drive
  -- animations and stuff
  -- ===========================
  -- (From eevee)
  clock += 1
  clock %= 27720
  foreach(buttons, update_btn)

  -- ===========================
  -- Player input
  -- ===========================
  -- From 2dplatformer.com
  -- NOTE: These equations
  -- probably will need
  -- simplified later but for
  -- now they can be all fancy
  -- and stuff.
  -- todo: this is all repetitive and stupid input handling
  --       are we chaning the left and right impetus based on state or what?
  if player_state=="walking" or player_state=="standing" then
    if btn(‚¨ÖÔ∏è) and not btn(‚û°Ô∏è) then
      player_state = "walking"
      facing = "left"
      player_velocity.x -= 1
    elseif btn(‚û°Ô∏è) and not btn(‚¨ÖÔ∏è) then
      player_state = "walking"
      facing = "right"
      player_velocity.x += 1
    else
      player_state = "standing"
    end
  elseif player_state=="jumping" then
    if btn(‚¨ÖÔ∏è) and btn(‚û°Ô∏è) then
    elseif btn(‚¨ÖÔ∏è) then
      facing = "left"
      player_velocity.x -= 1
    elseif btn(‚û°Ô∏è) then
      facing = "right"
      player_velocity.x += 1
    end
  elseif player_state=="batman" then
    assert(player_batman_end)
    if btn(‚¨ÖÔ∏è) and btn(‚û°Ô∏è) then
    elseif btn(‚¨ÖÔ∏è) then
      facing = "left"
      -- note: here we nudge position directly which
      --       has the right effect of swinging us
      player_position.x -= 1
    elseif btn(‚û°Ô∏è) then
      facing = "right"
      player_position.x += 1
    end
  end

  -- ====================================================
  -- jumping
  -- ====================================================
  if btnpp(üÖæÔ∏è) then
    jump_grace = 5
  elseif btnr(üÖæÔ∏è) and player_velocity.y < c_jump_term_velocity then
    player_velocity.y = c_jump_term_velocity
  end

  if jump_grace > 0 and player_state ~= "jumping" then
    player_state = "jumping"
    player_velocity.y = -c_jump_velocity
    jump_grace = 0
    player_batman_end = nil
  end
  jump_grace = max(jump_grace-1, 0)

  -- ====================================================
  -- "forces"
  -- ====================================================
  player_velocity.y += c_gravity
  if player_batman_end then
    local rope = player_batman_end - (player_position + player_velocity)
    local rope_mag = rope:length()
    if rope_mag > player_batman_len then
      -- whoops! Need to correct that! Pull me in
      -- correctly....
      rope *= (rope_mag - player_batman_len) / rope_mag
      player_velocity += rope
    end
  else
    player_velocity.x /= 1 + c_damping_walk
  end

  -- ====================================================
  -- collision detection
  -- ====================================================
  local new_position = player_position + player_velocity
  if player_velocity.y~=0 then
    local bonk_y = vertical_collide(player_position,new_position,player_velocity)
    if bonk_y then
      if player_state ~= "batman" then
        if player_velocity.y >0 then  -- falling and hit the ground
          if player_state == "jumping" then player_state = "standing" end
        else
          player_state = "jumping"    -- falling and jumping are the same
        end
      end
      new_position.y = bonk_y
      player_velocity.y = 0
    end
  end
  if player_velocity.x~=0 then
    local bonk_x = horizontal_collide(player_position,new_position,player_velocity)
    if bonk_x then
      new_position.x = bonk_x
      player_velocity.x = 0
    end
  end
  player_position = new_position

  -- ====================================================
  -- itemmmmm
  -- ====================================================
  if btn(‚ùé) then
    if not player_batman_end then
      for ty=player_position.y\8,0,-1 do
        local tile = mget(player_position.x\8,ty)
        if fget(tile,7) then
          player_state = "batman"
          player_batman_end = vec(player_position.x,ty*8+8)

          player_batman_len = player_batman_end - player_position
          player_batman_len = player_batman_len:length()
          break
        end
      end
    end

    player_batman_len=max(player_batman_len-1, 0)
  end

  -- ====================================================
  -- move the camera
  -- ====================================================
  -- the screen is 128x128 and we keep the center 64x64
  -- as free to move, but nudge the camera with a 32px
  -- limit is that ok?
  for v in all{"x","y"} do
    local pv,cv=player_position[v],camera_position[v]
    if pv-cv<32 then cv=pv-32 end
    if pv-cv>96 then cv=pv-96 end
    camera_position[v] = mid(
      cv,
      current_room.top_left[v],
      current_room.bottom_right[v])
  end
end

function _draw()
  cls()

  camera(camera_position.x,camera_position.y)
  map(0,0)

  if player_state == "batman" then
    line(
      player_position.x,
      player_position.y,
      player_batman_end.x,
      player_batman_end.y,7)
  end

  local pose=player_poses[player_state] or player_poses.standing
  local idx = pose[1+(clock\5)%#pose]
  spr(
    idx,
    player_position.x-4,
    player_position.y-8,
    1, 2,
    facing=="left"
  )
  --pset(player_position.x,player_position.y,10)
  print(current_room.name)
  print("p="..tostr(player_position).." v="..tostr(player_velocity),7)
  print(player_state)
end

__gfx__
000000000000000000ee00ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000e000e00edd0edd00e000e000ee00ee00ee00ee00000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000ede0edeedd0edd00ede0ede0edd0edd0edd0edd00000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000edddeddded00ed00edddedddedd0edd0edddedd000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ed00ed00edd0ed00ed00ed00ed00ed00ed00ed0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700edd0ed00eedeeee0edd0ed00edd0ed00edd0ed0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eedeeee00eeee7eeeedeeee0eedeeee0eedeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000eeee7ee0eeee0ee0eeee7ee0eeee7ee0eeee7ee00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000eeee0ee00eeeee70eeee0ee0eeee0ee0eeee0ee00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000eeeee700eeeee000eeeee700eeeee700eeeee700000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000eeeee0000eed0000eeeee000eeeee000eeeee000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000eed00000eed00000eed00000eed00000eed00000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000eeee00007eeed0077eee00077eeee000eeee50000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000eedde50007dede007dedee007dede000eedde00000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000150ee000000ed000de055000de00055515000eee00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000005550eee0000eee00eee00550eee000005550000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2edeede25cccccc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2deedee25cdccdc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2eedeed25cccdcc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2edeede25ccdccc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2deedee25cdccdc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2eedeed25cccccc50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
22222222555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4040404040404041414140404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000040404000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000004040400000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
