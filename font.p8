pico-8 cartridge // http://www.pico-8.com
version 22
__lua__
-- demo for custom font
function _init()
 hex=build_font()
 font=load_font()
end

function _update()
 if btnp(❎) or btnp(🅾️) then
  printh("[["..hex.."]]","@clip")  
 end
end

function _draw()
 cls(0)
 color(7)
 draw_string(
  "^the quick brown fox jumped",
  0,0)
 draw_string(
  "over the lazy dog.",
  0,10)

 color(12)  
 draw_string(
  "^here's the whole alphabet:",
  0,25)
 color(10)
 draw_string(
  "^aa^bb^cc^dd^ee^ff^gg^hh^ii^jj^kk^ll^mm",
  0,35)
 draw_string(
  "^nn^oo^pp^qq^rr^ss^tt^uu^vv^ww^xx^yy",
  0,45)
 draw_string(
  "^zz0123456789!?.:,'",
  0,55)
 
 color(11)
 draw_string(
  "^it takes "..#hex.." bytes.",
  0,100)
 draw_string(
  "^press a button to copy it to",
  0,110)
 draw_string(
  "your clipboard.",
  0,120)
  
 --draw_string("^hey buddy!",10,10)
end

-->8
-- encoding
-- utilities
-- return a new table that is 
-- the merge of the a and b.
function merge(a,b)
 local new_tbl,k,v={}
 for k,v in pairs(a) do
  new_tbl[k]=v
 end
 for k,v in pairs(b) do
  new_tbl[k]=v
 end
 return new_tbl
end

function concat(a,b)
 local r,i={}
 for i=1,#a do add(r,a[i]) end
 for i=1,#b do add(r,b[i]) end
 return r
end

function cons(a,v)
 return concat(a,{v})
end

-- figure out the dimensions
-- of the sprite. bottom-left
-- is constant, so we have h
-- and w.
function analyze(s)
 local px=8*flr(s%16)
 local py=8*flr(s/16)

 local width=0
 local height=0
 
 for y=0,7 do
  for x=0,7 do
   local clr=sget(px+x,py+y)
   if clr~=0 then
    width=max(x+1,width)
    height=max(height,8-y)
   end
  end
 end
 
 return {w=width,h=height}
end

-- convert sprite s into an 
-- actual 1bpp bitmap, complete
-- with encoded thing.
function bitmap(s,w,h)
 local px=8*flr(s%16)
 local py=8*flr(s/16)
 
 local bytes={(w<<4|h)}
 
 local acc,bits=0,0
 for y=8-h,7 do
  for x=0,w-1 do
   local cur=sget(px+x,py+y)

   acc <<= 1
   if cur~=0 then
    acc |= 1
   end

   bits+=1
   if bits==8 then
    add(bytes,acc)
    acc=0 bits=0
   end
  end
 end
 
 if bits~=0 then
  while bits~=8 do
   acc <<= 1
   bits += 1
  end
  add(bytes,acc)
 end
 
 return bytes
end

function dbg(x)
 --print(x)
end

function build_glyphs(s,e)
 local glyphs={}
 for i=s,e do
  r=analyze(i)
  dbg(i..": "..r.w.."x"..r.h)

  add(glyphs,{
   s=i,
   w=r.w,
   h=r.h,
   bmap=bitmap(i,r.w,r.h)
  })
 end
 return glyphs
end

function hexdigit(b)
 return sub(
  "0123456789abcdef",b+1,b+1)
end

function tohex(bytes)
 local txt=""
 for b in all(bytes) do
  txt=txt..hexdigit((b&0xf0)>>4)
  txt=txt..hexdigit(b&0x0f)
 end
 return txt
end

function build_font()
 glyphs=build_glyphs(1,68)

 for i=0,25 do
  glyphs[i+1].c=ord("a")+i-32
 end
 for i=0,25 do
  glyphs[27+i].c=ord("a")+i
 end
 for i=0,9 do
  glyphs[53+i].c=ord("0")+i
 end
 glyphs[63].c=ord("!")
 glyphs[64].c=ord("?")
 glyphs[65].c=ord(".")
 glyphs[66].c=ord(":")
 glyphs[67].c=ord(",")
 glyphs[68].c=ord("'")

 stream={}
 for g in all(glyphs) do
  add(stream,g.c)
  stream=concat(stream,g.bmap)
 end
 total_bytes=#stream

 return tohex(stream)
end
-->8
-- big font code
--
-- call load_font() then when
-- you want call draw_string()
-- to draw what you want. 
-- the font has upper case a-z,
-- lower case a-z, digits 0-9,
-- and some punctuation.
function load_font()
 local enc=[[414869999f994248caae999e4348699889964448e999999e4548f88e888f4648f88e888847486998b9964848999f99994918ff4a48111111964b48999e99994c488888888f4d58dd6b18c6314e489ddbb9994f48699999965048e99e8888515864a5295a4d5248e99e99995348698611965438e9249255489999999656588c6315294457588c6318d6aa58588a9442295159588c62a210845a48f122448f615664a52934624888e999966346698896644811799996654669f8966648254e4444674769971960684888e999996918bf6a3820926a6b488899e9996c28aaa96d56556b18c46e46ad99996f466999967046699e8871466997117246ad9888734669429674384ba492754699999676568c54a21077568c6b5aa878568a884544794699971e7a46f1248f3048699bd996313859249732486911248f3348691211963448aaaf22223548f88e11963648698e99963748f11248883848699699963948699711112118fd3f5874622210042e11803a16902c235827285800]]
 
 local bytes={}
 for i=1,#enc,2 do
  add(bytes,tonum("0x"..sub(enc,i,i+1)))
 end
 
 local font,bi={},1
 while bi<#bytes do
  local c=bytes[bi] bi+=1
  
  local bmap={bytes[bi]}
  local b=bmap[1]
  local w,h=(b&0xf0)>>4,b&0x0f
  local bytec=ceil(w*h/8)
  for j=1,bytec do
   add(bmap,bytes[bi+j])
  end
  bi+=bytec+1
  
  font[c]={w=w,h=h,bmap=bmap}
 end
 
 _jd_font=font
end

function draw_font_glyph(glyph,x,y)
 local bi,bits=2,0
 local bmap=glyph.bmap
 local byte=bmap[bi]
 for iy=8-glyph.h,7 do
  for ix=0,glyph.w-1 do
   if byte&0x80>0 then
    pset(x+ix,y+iy)    
   end
   -- advance bits
   byte<<=1 bits+=1
   if bits==8 then
    -- advance bytes
    bi+=1 byte=bmap[bi] bits=0
   end
  end
 end
end

function draw_string(str,x,y,c)
 if c~=nil then color(c) end
 local i,font=1,_jd_font
 while i<=#str do
  local c=sub(str,i,i) i+=1
  if c==" " then
   x+=4
  else
   if c=="^" then
    c=sub(str,i,i) i+=1
    c=ord(c)-32
   else
    c=ord(c)
   end
   
   local glyph=font[c]
   draw_font_glyph(glyph,x,y)
   x+=glyph.w+1
  end
 end
end
__gfx__
00000000077000007700000007700000777000007777000077770000077000007007000070000000000700007007000070000000770770007007000007700000
00000000700700007070000070070000700700007000000070000000700700007007000070000000000700007007000070000000707070007707000070070000
00700700700700007070000070070000700700007000000070000000700700007007000070000000000700007007000070000000707070007707000070070000
00077000700700007770000070000000700700007770000077700000700000007777000070000000000700007770000070000000700070007077000070070000
00077000700700007007000070000000700700007000000070000000707700007007000070000000000700007007000070000000700070007077000070070000
00700700777700007007000070070000700700007000000070000000700700007007000070000000000700007007000070000000700070007007000070070000
00000000700700007007000070070000700700007000000070000000700700007007000070000000700700007007000070000000700070007007000070070000
00000000700700007770000007700000777000007777000070000000077000007007000070000000077000007007000077770000700070007007000007700000
77700000077000007770000007700000777000007007000070007000700070007000700070007000777700000000000070000000000000000007000000000000
70070000700700007007000070070000070000007007000070007000700070000707000070007000000700000000000070000000000000000007000000000000
70070000700700007007000070000000070000007007000070007000700070000707000070007000007000000770000077700000077000000777000007700000
77700000700700007770000007700000070000007007000070007000700070000070000007070000007000007007000070070000700700007007000070070000
70000000700700007007000000070000070000007007000007070000700070000070000000700000070000007007000070070000700000007007000077770000
70000000707700007007000000070000070000007007000007070000707070000707000000700000070000007007000070070000700000007007000070000000
70000000700700007007000070070000070000007007000007070000707070000707000000700000700000007007000070070000700700007007000070070000
70000000077070007007000007700000070000000770000000700000070700007000700000700000777700000770700007700000077000000770000007700000
00700000000000007000000070000000007000007000000070000000000000000000000000000000000000000000000000000000000000000700000000000000
07070000077000007000000000000000000000007000000070000000000000000000000000000000000000000000000000000000000000000700000000000000
07000000700700007770000070000000007000007007000070000000070700007070000007700000077000000770000070700000077000007770000070070000
77700000700700007007000070000000007000007007000070000000707070007707000070070000700700007007000077070000700700000700000070070000
07000000077700007007000070000000007000007770000070000000707070007007000070070000700700007007000070070000070000000700000070070000
07000000000700007007000070000000007000007007000070000000700070007007000070070000777000000777000070000000007000000700000070070000
07000000700700007007000070000000707000007007000070000000700070007007000070070000700000000007000070000000700700000700000070070000
07000000077000007007000070000000070000007007000007000000700070007007000007700000700000000007000070000000077000000700000007700000
00000000000000000000000000000000000000000770000007000000077000000770000070700000777700000770000077770000077000000770000070000000
00000000000000000000000000000000000000007007000077000000700700007007000070700000700000007007000000070000700700007007000070000000
70007000700070007000700070070000777700007007000007000000000700000007000070700000700000007000000000070000700700007007000070000000
70007000700070000707000070070000000700007077000007000000000700000070000077770000777000007770000000700000077000000777000070000000
07070000707070000070000070070000007000007707000007000000007000000007000000700000000700007007000007000000700700000007000070000000
07070000707070000070000007770000070000007007000007000000070000000007000000700000000700007007000070000000700700000007000070000000
00700000707070000707000000070000700000007007000007000000700000007007000000700000700700007007000070000000700700000007000000000000
00700000070700007000700077700000777700000770000077700000777700000770000000700000077000000770000070000000077000000007000070000000
07770000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70007000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70007000000000007000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000000007000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000700000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
