pico-8 cartridge // http://www.pico-8.com
version 22
__lua__
-- utilities
-- return a new table that is 
-- the merge of the a and b.
function merge(a,b)
 local new_tbl,k,v={}
 for k,v in pairs(a) do
  new_tbl[k]=v
 end
 for k,v in pairs(b) do
  new_tbl[k]=v
 end
 return new_tbl
end

function concat(a,b)
 local r,i={}
 for i=1,#a do add(r,a[i]) end
 for i=1,#b do add(r,b[i]) end
 return r
end

function cons(a,v)
 return concat(a,{v})
end

-- figure out the dimensions
-- of the sprite. bottom-left
-- is constant, so we have h
-- and w.
function analyze(s)
 local px=8*flr(s%16)
 local py=8*flr(s/16)

 local width=0
 local height=0
 
 for y=0,7 do
  for x=0,7 do
   local clr=sget(px+x,py+y)
   if clr~=0 then
    width=max(x+1,width)
    height=max(height,8-y)
   end
  end
 end
 
 return {w=width,h=height}
end

-- convert sprite s into an 
-- actual 1bpp bitmap, complete
-- with encoded thing.
function bitmap(s,w,h)
 local px=8*flr(s%16)
 local py=8*flr(s/16)
 
 local bytes={(w<<4|h)}
 
 local acc,bits=0,0
 for y=8-h,7 do
  for x=0,w-1 do
   local cur=sget(px+x,py+y)

   acc <<= 1
   if cur~=0 then
    acc |= 1
   end

   bits+=1
   if bits==8 then
    add(bytes,acc)
    acc=0 bits=0
   end
  end
 end
 
 if bits~=0 then
  while bits~=8 do
   acc <<= 1
   bits += 1
  end
  add(bytes,acc)
 end
 
 return bytes
end

function dbg(x)
 --print(x)
end

function build_glyphs(s,e)
 local glyphs={}
 for i=s,e do
  r=analyze(i)
  dbg(i..": "..r.w.."x"..r.h)

  add(glyphs,{
   s=i,
   w=r.w,
   h=r.h,
   bmap=bitmap(i,r.w,r.h)
  })
 end
 return glyphs
end

function hexdigit(b)
 return sub(
  "0123456789abcdef",b+1,b+1)
end

function tohex(bytes)
 local txt=""
 for b in all(bytes) do
  txt=txt..hexdigit((b&0xf0)>>4)
  txt=txt..hexdigit(b&0x0f)
 end
 return txt
end


function _init()
 glyphs=build_glyphs(1,66)

 stream={}
 for g in all(glyphs) do
  stream=concat(stream,g.bmap)
 end
 total_bytes=#stream

 print("   total bytes: "..total_bytes)
 hex=tohex(stream)
 print("    hex length: "..#hex)
 printh("[["..hex.."]]","@clip")  

 font=load_font()
end

function _draw()
 cls(0)
 color(7)
 draw_string("^the quick brown fox jumped",0,0)
 draw_string("over the lazy dog.",0,10)
 --draw_string("^hey buddy!",10,10)
end

-->8
-- huffman encoding

-- bubble sort of nodes by freq
function sort_by_freq(nodes)
 local changed=true
 while changed do
  changed=false
  for i=1,#nodes-1 do
   if nodes[i].freq>nodes[i+1].freq then
    local tmp=nodes[i]
    nodes[i]=nodes[i+1]
    nodes[i+1]=tmp
    changed = true
   end
  end
 end
end

-- build the encoding table for
-- the given huffman tree and 
-- path
function build_table(node,path)
 if node.left~=nil then
  return merge(
   build_table(node.left,cons(path,0)),
   build_table(node.right,cons(path,1)))
 else
  local result={}
  result[node.val]=path
  return result
 end
end

function print_table(tbl)
 for k,v in pairs(tbl) do
  local bitstr=""
  for b in all(v) do
   bitstr=bitstr..b
  end
  print("  "..k.." "..bitstr)
 end
end

-- create a new bit-packing 
-- stream, which lets you write
-- bits at a time into bytes.
function new_bs()
 return {bytes={},acc=0,bits=0}
end

function write_bs(bs,bits)
 for bit in all(bits) do
  bs.acc=bs.acc<<1|bit
  bs.bits=bs.bits+1
  if bs.bits==8 then
   add(bs.bytes,bs.acc)
   bs.bits=0
   bs.acc=0
  end
 end
end

function flush_bs(bs)
 if bs.bits>0 then
  bs.acc=bs.acc<<(8-bs.bits)
  add(bs.bytes,bs.acc)
 end
 return bs.bytes
end

function compute_freq(bytes)
 local freq={}
 for b in all(bytes) do
  if freq[b]==nil then
   freq[b]=0
  end
  freq[b] = freq[b]+1
 end
 return freq
end

function build_tree(freq)
 -- add the initial nodes...
 local nodes={}
 for k,v in pairs(freq) do
  add(nodes,{val=k,freq=v})
 end

 -- ...then build the huffman 
 -- tree by combining the two
 -- nodes with the smallest 
 -- frequency into an internal
 -- node.
 while #nodes>1 do
  sort_by_freq(nodes)
  
  -- make a new inner node from
  -- the two smallest freq 
  -- nodes
  local inner={
   left=nodes[1],
   right=nodes[2],
   freq=nodes[1].freq+nodes[2].freq
  }
  
  -- replace the two smallest 
  -- freq nodes with the new 
  -- inner node.
  del(nodes,nodes[2])
  nodes[1]=inner
 end

 -- there is only one node, it
 -- is the root.
 return nodes[1]
end

function compress(bytes)
 -- yr basic huffman compression
 local freq=compute_freq(bytes)
 local tree=build_tree(freq)
 local tbl=build_table(tree)
 -- print_table(tbl)
 
 local bs=new_bs()
 for byte in all(bytes) do
  write_bs(bs,tbl[byte])
 end
 
 -- todo: need to write the 
 -- table too, dude.
 
 return flush_bs(bs)
end

function huffman_code(glyphs)
 -- compute the run freq of the
 -- glyphs
 local serialized={}
 for g in all(glyphs) do
  add(serialized,g.w)
  add(serialized,g.h)
  add(serialized,#g.runs)
  for r in all(g.runs) do
   add(serialized,r)
  end
 end

 local comp=compress(serialized)
 print("total: "..#comp)
end

-- huffman_code(glyphs)

-->8
-- big font code
--
-- call load_font() then when
-- you want call draw_string()
-- to draw what you want. 
-- the font has upper case a-z,
-- lower case a-z, digits 0-9,
-- and some punctuation.
function load_font()
 local enc=[[4869999f9948caae999e486998899648e999999e48f88e888f48f88e8888486998b99648999f999918ff481111119648999e9999488888888f58dd6b18c631489ddbb999486999999648e99e88885864a5295a4d48e99e9999486986119638e924924899999996588c63152944588c6318d6aa588a94422951588c62a2108448f122448f5664a529344888e999964669889648117999964669f89648254e444447699719604888e9999918bf3820926a488899e99928aaa956556b18c446ad99994669999646699e884669971146ad988846694296384ba49246999996568c54a210568c6b5aa8568a8845444699971e46f1248f48699bd99638592497486911248f486912119648aaaf222248f88e119648698e999648f11248884869969996486997111118fd587462221004118051a8]]
 
 -- decode the encoded hex
 -- string to a byte array 
 local bytes={}
 for i=1,#enc,2 do
  add(bytes,tonum("0x"..sub(enc,i,i+1)))
 end
 
 -- decode byte array into 
 -- glyphs
 local glyphs,bi={},1
 while bi<#bytes do
  local bmap={bytes[bi]}
  local b=bmap[1]
  local w,h=(b&0xf0)>>4,b&0x0f
  local bytec=ceil(w*h/8)
  for j=1,bytec do
   add(bmap,bytes[bi+j])
  end
  bi+=bytec+1
  add(glyphs,{w=w,h=h,bmap=bmap})
 end
 
 -- now we know the mapping...
 -- todo: save some tokens by 
 -- putting the mapping in the
 -- binary encoded data. 
 -- probably even easier!
 _jd_font={}
 for i=0,25 do
  _jd_font["^"..chr(ord("a")+i)]=glyphs[i+1]
 end
 for i=0,25 do
  _jd_font[chr(ord("a")+i)]=glyphs[27+i]
 end
 for i=0,9 do
  _jd_font[chr(ord("0")+i)]=glyphs[53+i]
 end
 _jd_font["!"]=glyphs[63]
 _jd_font["?"]=glyphs[64]
 _jd_font["."]=glyphs[65]
 _jd_font["â€¦"]=glyphs[66]
end

function draw_font_glyph(glyph,x,y)
 local bi,bits=2,0
 local bmap=glyph.bmap
 local byte=bmap[bi]
 for iy=8-glyph.h,7 do
  for ix=0,glyph.w-1 do
   if byte&0x80>0 then
    pset(x+ix,y+iy)    
   end
   -- advance bits
   byte<<=1 bits+=1
   if bits==8 then
    -- advance bytes
    bi+=1 byte=bmap[bi] bits=0
   end
  end
 end
end

function draw_string(str,x,y)
 local i,font=1,_jd_font
 while i<=#str do
  local c=sub(str,i,i)
  i+=1
  if c==" " then
   x+=4
  else
   if c=="^" then
    c=c..sub(str,i,i) i+=1
   end
   local glyph=font[c]
   draw_font_glyph(glyph,x,y)
   x+=glyph.w+1
  end
 end
end
__gfx__
00000000077000007700000007700000777000007777000077770000077000007007000070000000000700007007000070000000770770007007000007700000
00000000700700007070000070070000700700007000000070000000700700007007000070000000000700007007000070000000707070007707000070070000
00700700700700007070000070070000700700007000000070000000700700007007000070000000000700007007000070000000707070007707000070070000
00077000700700007770000070000000700700007770000077700000700000007777000070000000000700007770000070000000700070007077000070070000
00077000700700007007000070000000700700007000000070000000707700007007000070000000000700007007000070000000700070007077000070070000
00700700777700007007000070070000700700007000000070000000700700007007000070000000000700007007000070000000700070007007000070070000
00000000700700007007000070070000700700007000000070000000700700007007000070000000700700007007000070000000700070007007000070070000
00000000700700007770000007700000777000007777000070000000077000007007000070000000077000007007000077770000700070007007000007700000
77700000077000007770000007700000777000007007000070007000700070007000700070007000777700000000000070000000000000000007000000000000
70070000700700007007000070070000070000007007000070007000700070000707000070007000000700000000000070000000000000000007000000000000
70070000700700007007000070000000070000007007000070007000700070000707000070007000007000000770000077700000077000000777000007700000
77700000700700007770000007700000070000007007000070007000700070000070000007070000007000007007000070070000700700007007000070070000
70000000700700007007000000070000070000007007000007070000700070000070000000700000070000007007000070070000700000007007000077770000
70000000707700007007000000070000070000007007000007070000707070000707000000700000070000007007000070070000700000007007000070000000
70000000700700007007000070070000070000007007000007070000707070000707000000700000700000007007000070070000700700007007000070070000
70000000077070007007000007700000070000000770000000700000070700007000700000700000777700000770700007700000077000000770000007700000
00700000000000007000000070000000007000007000000070000000000000000000000000000000000000000000000000000000000000000700000000000000
07070000077000007000000000000000000000007000000070000000000000000000000000000000000000000000000000000000000000000700000000000000
07000000700700007770000070000000007000007007000070000000070700007070000007700000077000000770000070700000077000007770000070070000
77700000700700007007000070000000007000007007000070000000707070007707000070070000700700007007000077070000700700000700000070070000
07000000077700007007000070000000007000007770000070000000707070007007000070070000700700007007000070070000070000000700000070070000
07000000000700007007000070000000007000007007000070000000700070007007000070070000777000000777000070000000007000000700000070070000
07000000700700007007000070000000707000007007000070000000700070007007000070070000700000000007000070000000700700000700000070070000
07000000077000007007000070000000070000007007000007000000700070007007000007700000700000000007000070000000077000000700000007700000
00000000000000000000000000000000000000000770000007000000077000000770000070700000777700000770000077770000077000000770000070000000
00000000000000000000000000000000000000007007000077000000700700007007000070700000700000007007000000070000700700007007000070000000
70007000700070007000700070070000777700007007000007000000000700000007000070700000700000007000000000070000700700007007000070000000
70007000700070000707000070070000000700007077000007000000000700000070000077770000777000007770000000700000077000000777000070000000
07070000707070000070000070070000007000007707000007000000007000000007000000700000000700007007000007000000700700000007000070000000
07070000707070000070000007770000070000007007000007000000070000000007000000700000000700007007000070000000700700000007000070000000
00700000707070000707000000070000700000007007000007000000700000007007000000700000700700007007000070000000700700000007000000000000
00700000070700007000700077700000777700000770000077700000777700000770000000700000077000000770000070000000077000000007000070000000
07770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700000700000007070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
